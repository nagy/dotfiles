#!/usr/bin/env python3
import os
import shutil
import sys
from base64 import b32encode
from hashlib import sha256
from io import BytesIO
from pathlib import Path
from subprocess import run


def onefile(addr):
    first = addr[0:2]
    second = addr[2:4]
    if cd := os.environ.get("BLOCKER_WRITEDIR"):
        os.chdir(cd)
    assert os.path.exists(f"{first}/{second}")
    file = [f for f in os.listdir(f"{first}/{second}") if f.startswith(addr)][0]
    file = Path(f"{first}/{second}/" + file)
    out = run(
        "openssl enc -e -aes-256-ctr -nopad -nosalt -k ''|zstdcat",
        input=file.read_bytes(),
        capture_output=True,
        check=True,
        shell=True,
    ).stdout
    shouldhash = b32encode(sha256(out).digest()).decode().replace("====", "").lower()
    assert shouldhash == file.name
    return out


def chunks(b):
    for i in range(0, len(b), 32):
        yield b[i : i + 32]


def main(args=sys.argv[1:]):
    for a in args:
        hashpart = a[0:32]
        combined = onefile(hashpart)
        for b in chunks(combined):
            h = b32encode(b).decode().replace("====", "").lower()
            data = onefile(h)
            shutil.copyfileobj(BytesIO(data), sys.stdout.buffer)


if __name__ == "__main__":
    main()
