#!/usr/bin/env python3
import os
import sys
from base64 import b32encode
from hashlib import sha256
from pathlib import Path
from subprocess import run


def onefile(content):
    workdir = os.environ.get("BLOCKER_WRITEDIR","./")
    h = sha256(content)
    shorth = b32encode(h.digest()).decode().lower()
    first = shorth[0:2]
    second = shorth[2:4]
    assert shorth.endswith("====")
    shorth = shorth.replace("====", "")
    filename = Path(workdir+"/"+first + "/" + second + "/" + shorth)
    if filename.exists():
        return h, shorth
    filename.parent.parent.mkdir(exist_ok=True)
    filename.parent.mkdir(exist_ok=True)
    with filename.open("wb") as f:
        run(
            "zstd -9|openssl enc -e -aes-256-ctr -nopad -nosalt -k ''",
            input=content,
            stdout=f,
            check=True,
            shell=True,
        )
    os.utime(filename, times=(0, 0))
    return h, shorth


def main(args=sys.argv[1:]):
    for a in args:
        assert "@" not in a
        p = Path(a)
        assert p.exists()
        mtime = int(p.stat().st_mtime)
        out = run(["fastcdc"], stdin=p.open("rb"), check=True, capture_output=True)
        els = [int(i) for i in out.stdout.decode().split("\n") if i]
        hshs = b""
        opened = p.open("rb")
        for e in els:
            cut = opened.read(e)
            assert len(cut) == e
            h, _ = onefile(cut)
            hshs += h.digest()
        hshsh, _ = onefile(hshs)
        h = b32encode(hshsh.digest()[:20]).decode().lower()
        print(f"{h}@{mtime}@{p.name}")
    if len(args) == 0:
        bb = sys.stdin.buffer.read()
        out = run(["fastcdc"], input=bb, check=True, capture_output=True)
        els = [int(i) for i in out.stdout.decode().split("\n") if i]
        last = 0
        hshs = b""
        for e in els:
            cut = bb[last : last + e]
            last = last + e
            h, _ = onefile(cut)
            hshs += h.digest()
        hshsh, _ = onefile(hshs)
        h = b32encode(hshsh.digest()[:20]).decode().lower()
        print(f"{h}@0@-")


if __name__ == "__main__":
    main()
